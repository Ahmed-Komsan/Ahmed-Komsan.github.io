{"componentChunkName":"component---src-templates-post-post-jsx","path":"/blog/introduction-to-function-builders-in-swift","result":{"data":{"markdownRemark":{"html":"<p>Function builders is a swift language feature, first introduced in swift 5.1 available from Xcode 11. it helps in building declarative DSL ( Domain Specific Language ) for constructing user interface hierarchies or create an API that apply transformations to the statements in a way that make the API easier to read, understand and write.</p>\n<h2>what are function builders</h2>\n<p>function builders is nothing more than a type with certain functions that lets you easily build complex objects like HTML,XML or UIView hierarchies in a concise and readable way without any verbosity or in general apply some transformations to the statements of a function and combining them into a single result ( return value ). for example, this is how we create a HStack in SwiftUI.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token builtin\">HStack</span> <span class=\"token punctuation\">{</span>     \n     <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span>     \n     <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"World\"</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>this creates a HStack of the two Text. let’s compare that with it’s UIKit counterpart.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// create your labels just like you already do</span>\n<span class=\"token keyword\">let</span> firstLabel <span class=\"token operator\">=</span> <span class=\"token function\">UILabel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nfirstLabel<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span>\n<span class=\"token keyword\">let</span> secondLabel <span class=\"token operator\">=</span> <span class=\"token function\">UILabel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nsecondLabel<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> <span class=\"token string\">\"World\"</span>\n<span class=\"token comment\">// create the stackView</span>\n<span class=\"token keyword\">let</span> hStack <span class=\"token operator\">=</span> <span class=\"token function\">UIStackView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nhStack<span class=\"token punctuation\">.</span>axis <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span>horizontal\nhStack<span class=\"token punctuation\">.</span>distribution <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span>fillEqually\n<span class=\"token comment\">// add subviews to the stackView</span>\nhStack<span class=\"token punctuation\">.</span><span class=\"token function\">addArrangedSubview</span><span class=\"token punctuation\">(</span>firstLabel<span class=\"token punctuation\">)</span>\nhStack<span class=\"token punctuation\">.</span><span class=\"token function\">addArrangedSubview</span><span class=\"token punctuation\">(</span>secondLabel<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// add the stackview to the view hierarchy</span>\nview<span class=\"token punctuation\">.</span><span class=\"token function\">addSubview</span><span class=\"token punctuation\">(</span>hStack<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// then add constraints to the stackview ....</span></code></pre></div>\n<blockquote>\n<p>You will notice that the UIStackView in UIKit requires longer code that is harder to read and write compared to HStack in SwiftUI. this is where the Function Builders comes in, enabling to create an API that is concise, easier to read and write in a declarative way ( without any verbosity )</p>\n</blockquote>\n<p>This was necessary for SwiftUI and extends to similar problems that can significantly improved with the use of a DSL, including generating list and trees of heterogeneous data (e.g. HTML, XML) UIView hierarchies and similar use cases.</p>\n<h2>How to implement swift function builders</h2>\n<p>To create a function builder type, simply declare a struct annotated with <code class=\"language-text\">*@functionBuilder*</code> then supply a subset of function-building methods (protocol) that will do the transformations to a function statements.</p>\n<p>let’s see a simple example, we will create a builder that takes some person names and generate a greeting</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">@_functionBuilder\n<span class=\"token keyword\">struct</span> <span class=\"token builtin\">GreetingBuilder</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">func</span> <span class=\"token function\">buildBlock</span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> names<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">String</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> names<span class=\"token punctuation\">.</span><span class=\"token builtin\">count</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"Hello <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>names<span class=\"token punctuation\">.</span><span class=\"token builtin\">first</span><span class=\"token operator\">!</span><span class=\"token delimiter variable\">)</span></span>\"</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> firstPart <span class=\"token operator\">=</span> names<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span>names<span class=\"token punctuation\">.</span><span class=\"token builtin\">count</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">{</span> <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>$<span class=\"token number\">0</span><span class=\"token delimiter variable\">)</span></span>, \"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">joined</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">let</span> secondPart <span class=\"token operator\">=</span> names<span class=\"token punctuation\">[</span>names<span class=\"token punctuation\">.</span><span class=\"token builtin\">count</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span>names<span class=\"token punctuation\">.</span><span class=\"token builtin\">count</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">joined</span><span class=\"token punctuation\">(</span>separator<span class=\"token punctuation\">:</span> <span class=\"token string\">\" and \"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"Hello <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>firstPart<span class=\"token delimiter variable\">)</span></span><span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>secondPart<span class=\"token delimiter variable\">)</span></span>\"</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>   \n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>Note : there are many optional function-building methods available as part of protocol, the only required methods is <code class=\"language-text\">*buildBlock*</code> which is mandatory and should be static. in this example we only implemented <code class=\"language-text\">*buildBlock*</code> and will see others later in the post.</p>\n</blockquote>\n<p>Now with our builder created, the only thing left is to use it.</p>\n<p>The function builder type can be used as a custom attribute in three different syntactic positions : function, closure passed as an argument and the getter of var or subscript. as follow :</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">@_functionBuilder\n<span class=\"token keyword\">struct</span> <span class=\"token builtin\">GreetingBuilder</span> <span class=\"token punctuation\">{</span> \n   <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 1. apply GreetingBuilder on a function </span>\n<span class=\"token comment\">// which causes the function builder transform to be applied to the statements of the function.</span>\n@<span class=\"token builtin\">GreetingBuilder</span> <span class=\"token keyword\">func</span> <span class=\"token function\">generateGreetings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">String</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"Ahmed\"</span>\n    <span class=\"token string\">\"John\"</span>\n    <span class=\"token string\">\"Matt\"</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">generateGreetings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Hello Ahmed, John and Matt</span>\n<span class=\"token comment\">// 2. use GreetingBuilder on a closure passed as an argument to a function</span>\n<span class=\"token comment\">//  which causes the builder to be applied to the body of the closure that is passed as an argument.</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">generateGreetings</span><span class=\"token punctuation\">(</span>@<span class=\"token builtin\">GreetingBuilder</span> <span class=\"token number\">_</span> build <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">String</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> greetings <span class=\"token operator\">=</span> generateGreetings <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"name1\"</span>\n    <span class=\"token string\">\"name2\"</span>\n    <span class=\"token string\">\"name3\"</span>\n    <span class=\"token string\">\"name4\"</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>greetings<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// Hello name1, name2, name3 and name4</span>\n<span class=\"token comment\">// 3. use GreetingBuilder on the getter of a var or subscript</span>\n<span class=\"token comment\">//  which causes the builder to be applied to the getter</span>\n@<span class=\"token builtin\">GreetingBuilder</span> <span class=\"token keyword\">var</span> someVar <span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"A\"</span>\n    <span class=\"token string\">\"B\"</span>\n    <span class=\"token string\">\"C\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>someVar<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// Hello A, B and C</span></code></pre></div>\n<blockquote>\n<p>Note : we don’t use any punctuation characters (commas, parenthesis, and brackets ) when passing list of names.</p>\n</blockquote>\n<h2>Function builders in SwiftUI</h2>\n<p>Now let’s take a look at how function builders used in SwiftUI. let’s explore the HStack previous example in more details.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token builtin\">HStack</span> <span class=\"token punctuation\">{</span>     \n     <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span>     \n     <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"World\"</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This is similar to what we did when we applied our GeetingBuilder as a custom attribute to a closure that is passed as a parameter and if we looked at the HStack Class initializer :</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>alignment<span class=\"token punctuation\">:</span> <span class=\"token builtin\">VerticalAlignment</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span>center<span class=\"token punctuation\">,</span> spacing<span class=\"token punctuation\">:</span> <span class=\"token builtin\">CGFloat</span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">,</span> @<span class=\"token builtin\">ViewBuilder</span> content<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Content</span><span class=\"token punctuation\">)</span> </code></pre></div>\n<p>As you can see, the HStack init takes a content closure annotated with <code class=\"language-text\">@**ViewBuilder**</code> and the ViewBuilder Struct implements <code class=\"language-text\">*@functionBuilder*</code> providing a group of function-building methods one of them is :</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">func</span> buildBlock<span class=\"token operator\">&lt;</span><span class=\"token builtin\">C0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">C1</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> c0<span class=\"token punctuation\">:</span> <span class=\"token builtin\">C0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">_</span> c1<span class=\"token punctuation\">:</span> <span class=\"token builtin\">C1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">TupleView</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">C0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">C1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token keyword\">where</span> <span class=\"token builtin\">C0</span> <span class=\"token punctuation\">:</span> <span class=\"token builtin\">View</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">C1</span> <span class=\"token punctuation\">:</span> <span class=\"token builtin\">View</span></code></pre></div>\n<p><code class=\"language-text\">*buildBlock*</code> receives two Views objects as an arguments and combines them into single <code class=\"language-text\">*TupleView*</code> ( subclass of View ).</p>\n<blockquote>\n<p>Note : ViewBuilder Struct has other buildBlock methods, which takes from one to ten Views and all of them combine the child Views in a single TupleView. so you can create HStack with up to 10 Views in its content closure. Accordingly, when you try to create HStack with eleven Views or more the compiler will not find buildBlock Method that takes 11 arguments raising a compilation error.</p>\n</blockquote>\n<h2>More Function-building methods</h2>\n<p>Till now the only function-building method that we’ve implemented is <code class=\"language-text\">*buildBlock*</code>but there are other optional methods that give the DSL or the API Consumer more flexibility. some of them are :</p>\n<ul>\n<li><code class=\"language-text\">buildDo(_ parts: PartialResult...) -&gt; PartialResult</code></li>\n<li><code class=\"language-text\">buildIf(_ parts: PartialResult...) -&gt; PartialResult</code></li>\n<li><code class=\"language-text\">buildEither(first: PartialResult) -&gt; PartialResult</code> and <code class=\"language-text\">buildEither(second: PartialResult) -&gt; PartialResult</code></li>\n<li><code class=\"language-text\">buildExpression(_ expression: Expression) -&gt; PartialResult</code></li>\n<li><code class=\"language-text\">buildOptional(_ part: PartialResult?) -&gt; PartialResult</code></li>\n</ul>\n<p>Let’s create a another simple Builder that combine Strings and also supports If-Else statements.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">@_functionBuilder\n<span class=\"token keyword\">struct</span> <span class=\"token builtin\">StringBuilder</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">func</span> <span class=\"token function\">buildBlock</span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> someStrings<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">String</span> <span class=\"token punctuation\">{</span>\n         someStrings<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">+</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">func</span> <span class=\"token function\">buildEither</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">first</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">String</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">first</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">func</span> <span class=\"token function\">buildEither</span><span class=\"token punctuation\">(</span>second<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">String</span> <span class=\"token punctuation\">{</span>\n        second\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">func</span> <span class=\"token function\">buildIf</span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> someString<span class=\"token punctuation\">:</span><span class=\"token builtin\">String</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">String</span> <span class=\"token punctuation\">{</span>\n        someString <span class=\"token operator\">?</span><span class=\"token operator\">?</span> <span class=\"token string\">\"\"</span>\n    <span class=\"token punctuation\">}</span>\n    \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// use StringBuilder on a closure passed as an argument to a function</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">S</span><span class=\"token punctuation\">(</span>@<span class=\"token builtin\">StringBuilder</span> <span class=\"token number\">_</span> build <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">String</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">return</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>we’ve added 3 function-building methods :</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">buildEither</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">first</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">String</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">buildEither</span><span class=\"token punctuation\">(</span>second<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">String</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">buildIf</span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> someString<span class=\"token punctuation\">:</span><span class=\"token builtin\">String</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">String</span></code></pre></div>\n<p>The two <code class=\"language-text\">*buildEither*</code> methods will allows us to use if-else statements with our functions builder while <code class=\"language-text\">*buildIf*</code> allow using if statement only.</p>\n<p>Now we can use if-else statements :</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">@_functionBuilder\n<span class=\"token keyword\">struct</span> <span class=\"token builtin\">StringBuilder</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// use StringBuilder on a closure passed as an argument to a function</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">S</span><span class=\"token punctuation\">(</span>@<span class=\"token builtin\">StringBuilder</span> <span class=\"token number\">_</span> build <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">String</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">return</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> someBool <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n<span class=\"token keyword\">let</span> anotherBool <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n\n<span class=\"token keyword\">let</span> createdString <span class=\"token operator\">=</span> S <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> someBool <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"-someBool-\"</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token string\">\"B\"</span>\n    <span class=\"token string\">\"C\"</span>\n    <span class=\"token string\">\"D\"</span>\n    <span class=\"token keyword\">if</span> someBool <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"-someBool-\"</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> anotherBool <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"-anotherBool-\"</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"G\"</span>\n    <span class=\"token punctuation\">}</span>\n    S <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"2A\"</span>\n        <span class=\"token string\">\"2B\"</span>\n        <span class=\"token string\">\"2C\"</span>\n        S <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"3A\"</span>\n            <span class=\"token string\">\"3B\"</span>\n            S <span class=\"token punctuation\">{</span>\n                <span class=\"token string\">\"4A\"</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>createdString<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// BCD-anotherBool-2A2B2C3A3B4A</span></code></pre></div>\n<blockquote>\n<p>Note : using Xcode 11, I’ve tried adding <code class=\"language-text\">buildOptional</code> to the <code class=\"language-text\">*StringBuilder*</code>so i can add optional Strings but it seems not working as expected because the compiler forced me do optional unwrapping providing a default value like <code class=\"language-text\">*optionalString ?? “”*</code>😭 but it should be fixed with the next release of Xcode, check this thread on swift forums to track swift functions builders implementation progress <a href=\"https://forums.swift.org/t/function-builders-implementation-progress/32981\" target=\"_blank\" rel=\"nofollow\">here</a></p>\n</blockquote>\n<h2>See Also</h2>\n<ul>\n<li><a href=\"https://github.com/apple/swift-evolution/blob/9992cf3c11c2d5e0ea20bee98657d93902d5b174/proposals/XXXX-function-builders.md\" target=\"_blank\" rel=\"nofollow\">Swift function builder proposal</a></li>\n<li><a href=\"https://www.andyibanez.com/posts/understanding-function-builders/\" target=\"_blank\" rel=\"nofollow\">Understanding Function Builders in Swift</a></li>\n<li><a href=\"https://dev.to/gualtierofr/create-a-dsl-with-function-builders-4c20\" target=\"_blank\" rel=\"nofollow\">Create a DSL with Function Builders</a></li>\n<li><a href=\"https://github.com/carson-katri/awesome-function-builders\" target=\"_blank\" rel=\"nofollow\">List of DSLs made with function builders</a></li>\n</ul>\n<h2>Conclusion</h2>\n<p>I hope that this post gives you a little overview about function builders.</p>\n<p>If you think i missed anything, let me know and feel free to share with me any thoughts or feedback related to the post. Thanks for reading 😍 🌌</p>","timeToRead":6,"frontmatter":{"title":"Introduction to Function Builders in Swift","date":"11 Jul 2020","tags":["Swift","UIKit","IOS"],"path":"blog/introduction-to-function-builders-in-swift","excerpt":"Function builders is a swift language feature, first introduced in swift 5.1 available from Xcode 11. it helps in building declarative DSL ( Domain Specific Language ) for constructing user interface hierarchies.","cover":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='225'%20viewBox='0%200%20400%20225'%20preserveAspectRatio='none'%3e%3cpath%20d='M0%20113v112h401V112l-1-88v25h-15l-85-2h-71l-3%202c-2%202-2%203-2%207a3839%203839%200%20010%20114h-3l-3-2-2-1-5-3-6-2-3-2-2-1-4-2-5-3-4-2-16-7a332%20332%200%2000-22-11l-6-4-1-2c-3%200-14-12-14-15s0-3-2-2h-3l-4-5-7-14-2-4-1-8-2-8-1-8-1-8c-1%200-3-21-2-36l-1-12-1-4V0H0v113M341%201l3%202%205%202%204%203%202%201%209%203c5%202%207%203%208%205l4%202%207%201c4%200%209-3%209-6l2-3%204-10-29-1-28%201M230%2074l1%2035v15h41v-7l-1-26c-1-19-1-25%201-23v1h129l-9-1-8-1h8c7%200%208%200%208-2l-4-1-4-1h-2c-2%201-21%200-22-1v-1l-3-1-4-2h16l2-1h1l-46-1h-46a366%20366%200%2000-57-1l-1%2019m1%2074v22h68a970%20970%200%2000-24-2l-2-21v-20l-21-1h-21v22M56%20175l-16%201v9h68l4%201v-9h-5a787%20787%200%2000-51-2m-30%2013l-2%204v3l23%201%2040%202h17l2-3v-5l-22-1a442%20442%200%2001-58-1'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.7730496453900708,"src":"/static/0fecf9066aed5cc3e8c6601aeb23cde4/a7715/function_builders.jpg","srcSet":"/static/0fecf9066aed5cc3e8c6601aeb23cde4/8f7df/function_builders.jpg 250w,\n/static/0fecf9066aed5cc3e8c6601aeb23cde4/0f3a1/function_builders.jpg 500w,\n/static/0fecf9066aed5cc3e8c6601aeb23cde4/a7715/function_builders.jpg 1000w,\n/static/0fecf9066aed5cc3e8c6601aeb23cde4/47498/function_builders.jpg 1200w","sizes":"(max-width: 1000px) 100vw, 1000px"}}}}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"path":"blog/getting-started-with-diffable-data-source","title":"Getting Started with Diffable Data Source","tags":["Swift","UIKit","IOS"],"excerpt":"Diffable Data Source is a new declarative API for UITableView and its counterpart UICollectionView introduced at WWDC19, IOS 13 as a replacement for UITableViewDataSource and UICollectionViewDataSource.","cover":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='167'%20viewBox='0%200%20400%20167'%20preserveAspectRatio='none'%3e%3cpath%20d='M109%2021L13%2098%200%20109v11l17-14A126111%20126111%200%2001144%201c1-1%201-1-5-1h-5l-25%2021m272%205L258%20163l-3%204h48l8-10a2005%202005%200%200066-79%20272%20272%200%200020-24l3-3V5l-19%2021'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":2.380952380952381,"src":"/static/4e4efdad88ff4607d90485cba60d3758/2a4de/diffable1.png","srcSet":"/static/4e4efdad88ff4607d90485cba60d3758/6d161/diffable1.png 150w,\n/static/4e4efdad88ff4607d90485cba60d3758/630fb/diffable1.png 300w,\n/static/4e4efdad88ff4607d90485cba60d3758/2a4de/diffable1.png 600w,\n/static/4e4efdad88ff4607d90485cba60d3758/db955/diffable1.png 900w,\n/static/4e4efdad88ff4607d90485cba60d3758/f3583/diffable1.png 1200w","sizes":"(max-width: 600px) 100vw, 600px"}}}}}}]}},"pageContext":{"postPath":"blog/introduction-to-function-builders-in-swift","translations":[{"hreflang":"en","path":"/blog/introduction-to-function-builders-in-swift"}]}},"staticQueryHashes":["4097791827"]}