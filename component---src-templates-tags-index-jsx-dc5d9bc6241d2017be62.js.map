{"version":3,"sources":["webpack://rolwinreevan_gatsby_blog/./src/templates/tags/index.jsx","webpack://rolwinreevan_gatsby_blog/./src/templates/tags/tags.module.less"],"names":["data","tag","pageContext","tagName","Config","name","Utils","tagPagePath","tagImage","allFile","edges","find","edge","node","childImageSharp","fluid","posts","allMarkdownRemark","className","Header","title","description","path","keywords","Sidebar","alt","gutter","map","post","key","xs","sm","md","lg","PostCard"],"mappings":"oVAyHA,EAzGgB,SAAC,GAA2B,IAAzBA,EAAwB,EAAxBA,KACTC,EADiC,EAAlBC,YACfD,IACFE,EAAUC,SAAYH,GAAKI,MAAQC,eAAiBL,GACpDM,EAAcH,cACdI,EAAWR,EAAKS,QAAQC,MAAMC,MAAK,SAACC,GAAD,OAAUA,EAAKC,KAAKR,OAASJ,KACnEY,KAAKC,gBAAgBC,MAClBC,EAAQhB,EAAKiB,kBAAkBP,MACrC,OACE,qBAAQQ,UAAU,gBAChB,qBAAQA,UAAU,aAChB,gBAACC,EAAA,EAAD,MACA,gBAAC,IAAD,CACEC,MAAOjB,EACPkB,YAAW,kBAAoBlB,EAApB,KAAgCC,SAAYH,GAAKoB,YAAjD,IACXC,KAAMhB,mBAAqBC,EAAaN,GACxCsB,SAAU,CAACpB,KAEb,gBAACqB,EAAA,EAAD,KACE,uBAAKN,UAAS,+CACZ,8BAAMf,GACN,uBAAKe,UClCe,0CDmClB,gBAAC,IAAD,CAAKA,UClCI,gCDkCwBH,MAAOP,EAAUiB,IAAKtB,KAEzD,sBAAIe,UAAU,cAAcd,SAAYH,GAAKoB,cAE/C,qBAAKK,OAAQ,CAAC,GAAI,KACfV,EAAMW,KAAI,SAACC,EAAMC,GAAP,OAET,qBAAKA,IAAKA,EAAKC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GACzC,gBAACC,EAAA,EAAD,CAAUlC,KAAM4B","file":"component---src-templates-tags-index-jsx-dc5d9bc6241d2017be62.js","sourcesContent":["/* eslint-disable react/forbid-prop-types */\n/* Vendor imports */\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { graphql } from \"gatsby\";\nimport Img from \"gatsby-image\";\nimport { Layout, Row, Col } from \"antd\";\n/* App imports */\nimport SEO from \"../../components/Seo\";\nimport Header from \"../../components/PageLayout/Header\";\nimport PostCard from \"../../components/PostCard\";\nimport SidebarWrapper from \"../../components/PageLayout/Sidebar\";\nimport Config from \"../../../config\";\nimport Utils from \"../../utils/pageUtils\";\nimport * as style from \"./tags.module.less\";\n\nconst TagPage = ({ data, pageContext }) => {\n  const { tag } = pageContext;\n  const tagName = Config.tags[tag].name || Utils.capitalize(tag);\n  const tagPagePath = Config.pages.tag;\n  const tagImage = data.allFile.edges.find((edge) => edge.node.name === tag)\n    .node.childImageSharp.fluid;\n  const posts = data.allMarkdownRemark.edges;\n  return (\n    <Layout className=\"outerPadding\">\n      <Layout className=\"container\">\n        <Header />\n        <SEO\n          title={tagName}\n          description={`All post about ${tagName}. ${Config.tags[tag].description} `}\n          path={Utils.resolvePageUrl(tagPagePath, tag)}\n          keywords={[tagName]}\n        />\n        <SidebarWrapper>\n          <div className={`marginTopTitle ${style.tagsList}`}>\n            <h1>#{tagName}</h1>\n            <div className={style.bannerImgContainer}>\n              <Img className={style.bannerImg} fluid={tagImage} alt={tagName} />\n            </div>\n            <h4 className=\"textCenter\">{Config.tags[tag].description}</h4>\n          </div>\n          <Row gutter={[20, 20]}>\n            {posts.map((post, key) => (\n              // eslint-disable-next-line react/no-array-index-key\n              <Col key={key} xs={24} sm={24} md={12} lg={8}>\n                <PostCard data={post} />\n              </Col>\n            ))}\n          </Row>\n        </SidebarWrapper>\n      </Layout>\n    </Layout>\n  );\n};\n\nTagPage.propTypes = {\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      edges: PropTypes.arrayOf(PropTypes.object).isRequired,\n    }).isRequired,\n    allFile: PropTypes.shape({\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            name: PropTypes.string.isRequired,\n            childImageSharp: PropTypes.shape({\n              fluid: PropTypes.object.isRequired,\n            }).isRequired,\n          }).isRequired,\n        })\n      ).isRequired,\n    }).isRequired,\n  }).isRequired,\n  pageContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport const pageQuery = graphql`\n  query($tag: String!) {\n    allMarkdownRemark(\n      filter: {\n        frontmatter: { tags: { in: [$tag] } }\n        fileAbsolutePath: { regex: \"/index.md$/\" }\n      }\n      sort: { fields: [frontmatter___date], order: DESC }\n    ) {\n      edges {\n        node {\n          frontmatter {\n            title\n            date(formatString: \"MMMM DD, YYYY\")\n            path\n            tags\n            excerpt\n            cover {\n              childImageSharp {\n                fluid(maxWidth: 600) {\n                  ...GatsbyImageSharpFluid_tracedSVG\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    allFile(filter: { name: { eq: $tag }, dir: { regex: \"/tags$/\" } }) {\n      edges {\n        node {\n          name\n          childImageSharp {\n            fluid(maxHeight: 600) {\n              ...GatsbyImageSharpFluid_tracedSVG\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default TagPage;\n","// extracted by mini-css-extract-plugin\nexport var tagsList = \"tags-module--tagsList--10-aU\";\nexport var bannerImgContainer = \"tags-module--bannerImgContainer--2_1Pn\";\nexport var bannerImg = \"tags-module--bannerImg--3gvfh\";"],"sourceRoot":""}